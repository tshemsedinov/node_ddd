Task #1
=======

4. Теперь, на клиенте нужно организовать условное подключение к серверу по http или websocket в зависимости от url,
передаваемого в функцию scaffold, т.е. мы должны иметь или две реализации scaffold с одинаковой сигнатурой и с разными
транспортами или коллекцию транспортов, например const transport = { http:..., ws:... };. По желанию вы можете
реализовать то же для протоколов https и http2 как на клиенте, так и на сервере. Но это не обязательно,
принцип переключения уже понятен.

5. Можно реализовать подключение фреймворков по такому же принципу, как мы это сделали с транспортами, это тоже
по желанию, не обязательно, например fastify или любой другой фреймворк и добавить в конфиге параметр:
framework со значениями native, fastify и т.д.

7. Так же поступим и с логгером, делаем его пристегиваемым: выносим в конфиги его название,
при старте подгружаем нужный и перенаправляем console в него. Можете взять логгер pino.


Global:
=======

1. WS написать свою реализацию для Node
2. Свой json:api сериализатор
3. Query конструктор для PG и json:api